buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.ajoberstar:grgit:2.2.0'
    }
}

import org.ajoberstar.grgit.Grgit

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

dependencies {
    compile project(":OrbisAPI")
}

ext.config = loadConfig(file('build.properties'))
ext.repo = Grgit.open()

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

version = "${config.mod_version}"
group = "com.gildedgames"
archivesBaseName = "aether_ii"

sourceSets {
    api {
        java { srcDir "src/api/java" }
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
}

minecraft {
    version = config.forge_version
    mappings = config.forge_mappings

    runDir = "run"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

// We disable this because Gradle will fail to build otherwise for some reason.
// See https://github.com/MinecraftForge/Srg2Source/issues/10
minecraft {
    makeObfSourceJar = false
}

static def loadConfig(File config) {
    def props = new Properties()
    config.withInputStream {
        stream -> props.load(stream)
    }
    return new ConfigSlurper().parse(props)
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    keyStore = System.getenv('GG_SIGN_KEYSTORE')
    alias = System.getenv('GG_SIGN_ALIAS')
    storePass = System.getenv('GG_SIGN_STORE_PASS')
    keyPass = System.getenv('GG_SIGN_KEY_PASS')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

task apiJar(type: Jar) {
    classifier = "api"

    from sourceSets.api.output
}

artifacts {
    archives jar
    archives apiJar
}

build.dependsOn signJar