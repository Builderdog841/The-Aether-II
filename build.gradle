buildscript {
    repositories {
        maven {
            url 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

group = "com.gildedgames"
archivesBaseName = "aether_ii"

if (System.getenv("BUILD_NUMBER") != null) {
    version = "${minecraft_version}-${mod_version}+build${System.getenv("BUILD_NUMBER")}"
} else {
    version = "${minecraft_version}-${mod_version}-SNAPSHOT"
}

sourceSets {
    api {
        java { srcDir "src/api/java" }
    }
}

repositories {
    mavenCentral()

    maven { url = 'https://repo.spongepowered.org/maven' }
    maven { url = 'https://repo.gildedgames.com/maven' }
}

configurations {
    shaded
    runtime.extendsFrom shaded
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    shaded project(":orbis-lib")
}

minecraft {
    mappings channel: mcp_mappings_channel, version: mcp_mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                aether {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                aether {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output

    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


if (System.getenv("JARSIGN_SECRETS_FILE") != null) {
    def secretsFile = file(System.getenv("JARSIGN_SECRETS_FILE"))

    def secrets = new Properties()
    secrets.load(secretsFile.newReader())

    [jar, apiJar].each { jarTask ->
        def task = task(jarTask.name + 'Sign', type: SignJar) {
            keyStore = System.getenv("JARSIGN_KEYSTORE_FILE")
            alias = secrets.alias
            storePass = secrets.storePassword
            keyPass = secrets.keyPassword

            inputFile = jarTask.archivePath
            outputFile = jarTask.archivePath
        }

        jarTask.finalizedBy task
    }
}

// Prevents re-building OrbisAPI
task ciBuild {
    dependsOn build
}
