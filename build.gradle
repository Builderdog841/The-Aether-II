buildscript {
    repositories {
        maven {
            name 'Forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            name 'Sponge'
            url 'https://repo.spongepowered.org/maven'
        }
        maven {
            name 'Parchment'
            url 'https://maven.parchmentmc.org'
        }
        maven {
            name 'Gradle'
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+', changing: true
        classpath group: 'io.github.0ffz', name: 'gpr-for-gradle', version: '1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'io.github.0ffz.github-packages'

version = project.mc_version + '-' + project.aether_ii_version
group = 'com.gildedgames.aether_ii' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'aether_ii'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    mappings channel: 'parchment', version: project.mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            //Only uncomment this if you actually need the debug logging! If you enable this the log will be full of incredibly useless information spam
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                aether_ii {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                aether_ii {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            args '--mod', 'aether_ii', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                aether_ii {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//    compileOnly "com.gildedgames.nitrogen:nitrogen:${project.nitrogen_version}"
//    runtimeOnly fg.deobf("com.gildedgames.nitrogen:nitrogen:${project.nitrogen_version}")

    compileOnly "top.theillusivec4.curios:curios-forge:${project.curios_version}:api"
    compileOnly "top.theillusivec4.curios:curios-forge:${project.curios_version}"
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")

//    jarJar fg.deobf("com.gildedgames.nitrogen:nitrogen:${project.nitrogen_version}") {
//        jarJar.ranged(it, "[${project.nitrogen_version},)")
//        jarJar.pin(it, "${project.nitrogen_version}")
//    }

    jarJar fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}") {
        jarJar.ranged(it, "[${project.curios_version},)")
        jarJar.pin(it, "${project.curios_version}")
    }
}

repositories {
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://dvs1.progwml6.com/files/maven/"}
//    maven githubPackage.invoke("Gilded-Games/Nitrogen")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "The Aether II",
                "Specification-Vendor"    : "Gilded Games",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : "The Aether II",
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Gilded Games",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "aether_ii.mixins.json"
        ])
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

jar.finalizedBy('reobfJar')

reobf.create('jarJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def jar = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

tasks.jarJar.configure {
    archiveClassifier = ""
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Gilded-Games/The-Aether-II"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

mixin {
    config "aether_ii.mixins.json"
    add sourceSets.main, "aether_ii.refmap.json"
}