import net.minecraftforge.gradle.userdev.tasks.JarJar

plugins {
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'org.parchmentmc.librarian.forgegradle' version '[1,2)'
    id 'org.moddingx.modgradle.mapping' version '[4,5)'
    id 'org.moddingx.modgradle.sourcejar' version '[4,5)' apply false
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'com.matthewprenger.cursegradle' version '[1.4,1.5)'
    id 'com.modrinth.minotaur' version '[2,3)'
}

version = "${project.mc_version}-${project.mod_version}-neoforge"
group = 'com.aetherteam.aetherii' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

apply plugin: 'org.moddingx.modgradle.sourcejar'

minecraft {
    mappings channel: 'parchment', version: project.mappings

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property "${mod_id}.iside", 'true'
//            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info' // info is the default for production

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id

            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/'), '--existing-mod', 'nitrogen_internals', '--existing-mod', 'cumulus_menus'

            environment 'target', 'fmluserdevdata'
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.neoforged:forge:${project.mc_version}-${project.neoforge_version}"

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:0.2.0-beta.9"))
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation('com.github.llamalad7.mixinextras:mixinextras-forge:0.2.0-beta.9')

    implementation fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation fg.deobf("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}+${project.mc_version}")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${project.mc_version}:${project.geckolib_version}")
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${project.mc_version}:${project.sbl_version}")

    compileOnly "mezz.jei:jei-${project.mc_version}-common-api:${project.jei_version}"
    compileOnly "mezz.jei:jei-${project.mc_version}-forge-api:${project.jei_version}"
//    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    jarJar('com.github.llamalad7.mixinextras:mixinextras-forge:0.2.0-beta.9') {
        jarJar.ranged(it, "[${project.mixinextras_version},)")
        jarJar.pin(it, "${project.mixinextras_version}")
    }

    jarJar fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}") {
        jarJar.ranged(it, "[${project.nitrogen_version},)")
        jarJar.pin(it, "${project.nitrogen_version}")
    }

    jarJar fg.deobf("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}") {
        jarJar.ranged(it, "[${project.cumulus_version},)")
        jarJar.pin(it, "${project.cumulus_version}")
    }

    jarJar fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}+${project.mc_version}") {
        jarJar.ranged(it, "[${project.curios_version},)")
        jarJar.pin(it, "${project.curios_version}+${project.mc_version}")
    }

    jarJar fg.deobf("software.bernie.geckolib:geckolib-forge-${project.mc_version}:${project.geckolib_version}") {
        jarJar.ranged(it, "[${project.geckolib_version},)")
        jarJar.pin(it, "${project.geckolib_version}")
    }

    jarJar fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${project.mc_version}:${project.sbl_version}") {
        jarJar.ranged(it, "[${project.sbl_version},)")
        jarJar.pin(it, "${project.sbl_version}")
    }

    //compileOnly fileTree(dir: 'libs', include: '*.jar')
}

repositories {
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url = 'https://dl.cloudsmith.io/public/tslat/sbl/maven/' }
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "The Aether Team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "The Aether Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'

    archiveClassifier = 'no-embeds'
}

tasks.named('jarJar', JarJar).configure {
    archiveClassifier = ''
}

tasks.jarJar.finalizedBy('reobfJarJar')

tasks.named(sourceSets.main.compileJavaTaskName) {
    outputs.file("${it.temporaryDir}/${it.name}-refmap.json").withPropertyName("mixin refmap")
}

compileJava {
    options.incremental = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact project.tasks.jarJar
            artifact sourceJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/The-Aether-II"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "${project.curseforge_id}"
        releaseType = "${project.version_type}"
        changelog = file("$rootDir/docs/CHANGELOG.md")
        changelogType = "markdown"
        addGameVersion("${project.mc_version}")
        mainArtifact(tasks.jarJar) {
            displayName = "${project.mod_name} - ${version}"
            relations {
                embeddedLibrary "curios"
                embeddedLibrary "geckolib"
                embeddedLibrary "smartbrainlib"
                optionalDependency "starlight-forge"
            }
        }
    }
    options {
        debug = true
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${project.modrinth_id}"
    versionNumber = "${version}"
    versionType = "${project.version_type}"
    versionName = "${project.mod_name} - ${version}"
    changelog = new File("$rootDir/docs/CHANGELOG.md").text
    uploadFile = tasks.jarJar
    gameVersions = ["${project.mc_version}"]
    loaders = ["forge", "neoforge"]
    dependencies {
        embedded.version "curios", "${project.curios_version}"
        embedded.version "cumulus", "${project.cumulus_version}"
        embedded.version "geckolib", "${project.geckolib_version}"
        embedded.version "smartbrainlib", "${project.sbl_version}"
    }
    debugMode = true
}

mixin {
    config "${project.mod_id}.mixins.json"
    add sourceSets.main, "${project.mod_id}.refmap.json"
}

build {
    dependsOn 'jarJar'
}