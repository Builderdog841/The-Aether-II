buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'org.ajoberstar:grgit:2.2.0'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

apply plugin: 'maven-publish'

deobfMcMCP { failOnAtError = false }
deobfMcSRG { failOnAtError = false }

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    compile project(":OrbisAPI")

    shade('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        transitive = false
    }
}

ext.config = loadConfig(file('build.properties'))

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

version = "${config.mod_version}"
group = "com.gildedgames"
archivesBaseName = "aether_ii"

sourceSets {
    api {
        java { srcDir "src/api/java" }
    }
}

jar {
    dependsOn(':OrbisAPI:build')

    from sourceSets.api.output
    from sourceSets.main.output

    manifest.mainAttributes(
            "ContainedDeps": "${project(":OrbisAPI").mod_name}-${project(":OrbisAPI").mod_version}.jar",
            "FMLAT": "aether_at.cfg",
            "FMLCorePlugin": "com.gildedgames.aether.common.asm.AetherFMLLoadingPlugin",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true
    )
    
    from("OrbisAPI/build/libs") {
        include("${project(":OrbisAPI").mod_name}-${project(":OrbisAPI").mod_version}.jar")
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            rename 'LICENSE.txt', 'org/spongepowered/LICENSE.txt'

            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.RSA'
            exclude 'META-INF/*.MF'
        }
    }

    classifier = 'universal'

}

minecraft {
    version = config.forge_version
    mappings = config.forge_mappings

    runDir = "run"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

mixin {
    add sourceSets.main, "mixins.aether.refmap.json"
}

idea {
    module {
        inheritOutputDirs = true
    }
}

// We disable this because Gradle will fail to build otherwise for some reason.
// See https://github.com/MinecraftForge/Srg2Source/issues/10
minecraft {
    makeObfSourceJar = false
}

static def loadConfig(File config) {
    def props = new Properties()
    config.withInputStream {
        stream -> props.load(stream)
    }
    return new ConfigSlurper().parse(props)
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    keyStore = System.getenv('GG_SIGN_KEYSTORE')
    alias = System.getenv('GG_SIGN_ALIAS')
    storePass = System.getenv('GG_SIGN_STORE_PASS')
    keyPass = System.getenv('GG_SIGN_KEY_PASS')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

task apiJar(type: Jar) {
    classifier = "api"

    from sourceSets.api.output
}

artifacts {
    archives jar
    archives apiJar
}

if (System.getenv("GRADLE_BUILD_SIGNED") == 'true') {
    build.dependsOn signJar
}