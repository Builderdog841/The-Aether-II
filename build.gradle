buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

def isPhosphorSubmodule = findProject(":Phosphor") != null

repositories {
    mavenCentral()

    maven { url = 'https://repo.spongepowered.org/maven' }
    maven { url = 'https://repo.gildedgames.com/maven' }
}

configurations {
    compileShaded
    compile.extendsFrom compileShaded

    runtimeShaded
    runtime.extendsFrom runtimeShaded

    shaded
    shaded.extendsFrom runtimeShaded, compileShaded
    shaded.exclude group: "org.spongepowered"
}

dependencies {
    compileShaded project(":orbis-api")

    if (isPhosphorSubmodule) {
        runtime project(':phosphor')
    } else {
        runtime "me.jellysquid.mods:phosphor:${phosphor_version}:dev"
        shaded  "me.jellysquid.mods:phosphor:${phosphor_version}:universal"
    }
}

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

if (System.getenv("BUILD_NUMBER") != null) {
    version = "${minecraft_version}-${mod_version}+build${System.getenv("BUILD_NUMBER")}"
} else {
    version = "${minecraft_version}-${mod_version}-SNAPSHOT"
}

group = "com.gildedgames"
archivesBaseName = "aether_ii"

sourceSets {
    api {
        java { srcDir "src/api/java" }
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output

    manifest.mainAttributes(
            "FMLAT": "aether_at.cfg"
    )

    exclude 'assets/**'

    classifier = "reobf"
}

task apiJar(type: Jar) {
    classifier = "api"

    from sourceSets.api.output
}

task reobfJarWithAssets(type: Jar, dependsOn: extractAnnotationsJar) {
    from zipTree(jar.archivePath)

    into("assets") {
        from "src/main/resources/assets"
    }

    gradle.projectsEvaluated({
        def artifacts = configurations.shaded.files
                .findAll { it.name.contains("-universal.jar") }

        from(artifacts)

        manifest.mainAttributes(
                "ContainedDeps": artifacts.collect { it.name }.join(' '),
                "FMLAT": "aether_at.cfg"
        )
    })

    classifier "universal"
}

reobfJar.finalizedBy reobfJarWithAssets

minecraft {
    version = "$minecraft_version-$forge_version"
    mappings = "$forge_mappings"

    runDir = "run"

    def plugin = "me.jellysquid.mods.phosphor.core.PhosphorFMLLoadingPlugin"

    clientJvmArgs = serverJvmArgs += "-Dfml.coreMods.load=$plugin"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        exclude 'assets/**'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'assets/**'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

// We disable this because Gradle will fail to build otherwise for some reason.
// See https://github.com/MinecraftForge/Srg2Source/issues/10
minecraft {
    makeObfSourceJar = false
}

if (System.getenv("JARSIGN_SECRETS_FILE") != null) {
    def secretsFile = file(System.getenv("JARSIGN_SECRETS_FILE"))

    def secrets = new Properties()
    secrets.load(secretsFile.newReader())

    [reobfJarWithAssets, apiJar].each { jarTask ->
        def task = task(jarTask.name + 'Sign', type: SignJar) {
            keyStore = System.getenv("JARSIGN_KEYSTORE_FILE")
            alias = secrets.alias
            storePass = secrets.storePassword
            keyPass = secrets.keyPassword

            inputFile = jarTask.archivePath
            outputFile = jarTask.archivePath
        }

        jarTask.finalizedBy task
    }
}

build.dependsOn apiJar

// Prevents re-building OrbisAPI
task ciBuild {
    dependsOn build
}