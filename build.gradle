buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

if (System.getenv("BUILD_NUMBER") != null) {
    version = "${minecraft_version}-${mod_version}+build${System.getenv("BUILD_NUMBER")}"
} else {
    version = "${minecraft_version}-${mod_version}-SNAPSHOT"
}

group = "com.gildedgames"
archivesBaseName = "aether_ii"

sourceSets {
    api {
        java { srcDir "src/api/java" }

        compileClasspath = sourceSets.main.compileClasspath
    }
}

repositories {
    mavenCentral()

    maven { url = 'https://repo.gildedgames.com/maven' }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    compile project(":orbis-lib")
    compile sourceSets.api.output
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output

    classifier "universal"

    manifest {
        attributes([
                "Specification-Title": "Aether II",
                "Specification-Vendor": "Gilded Games",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"Gilded Games",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    classifier = "api"

    from sourceSets.api.output
}

minecraft {
    mappings channel: mcp_mappings_channel, version: mcp_mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                aether {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                aether {
                    source sourceSets.main
                }
            }
        }
    }
}
//
//if (System.getenv("JARSIGN_SECRETS_FILE") != null) {
//    def secretsFile = file(System.getenv("JARSIGN_SECRETS_FILE"))
//
//    def secrets = new Properties()
//    secrets.load(secretsFile.newReader())
//
//    [jar, apiJar].each { jarTask ->
//        def task = task(jarTask.name + 'Sign', type: SignJar) {
//            keyStore = System.getenv("JARSIGN_KEYSTORE_FILE")
//            alias = secrets.alias
//            storePass = secrets.storePassword
//            keyPass = secrets.keyPassword
//
//            inputFile = jarTask.archivePath
//            outputFile = jarTask.archivePath
//        }
//
//        build.dependsOn task
//    }
//}
//
//build.dependsOn apiJar

jar.dependsOn ":orbis-lib:build"
