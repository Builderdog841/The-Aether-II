package com.gildedgames.aether.common.blocks.construction.walls;

import com.gildedgames.aether.api.registrar.BlocksAether;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.BlockWall;
import net.minecraft.state.BooleanProperty;
import net.minecraft.block.state.BlockStateContainer;
import net.minecraft.item.Item;
import net.minecraft.state.StateContainer;
import net.minecraft.util.Direction;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockReader;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;

import java.util.Random;

public class BlockSkyrootWall extends BlockCustomWall
{

	public static final BooleanProperty PROPERTY_GENERATED = BooleanProperty.create("is_generated");

	public BlockSkyrootWall(Block.Properties properties)
	{
		super(properties);

		this.setDefaultState(this.stateContainer.getBaseState().with(PROPERTY_GENERATED, false));
	}

	// If an Aether log wall that has been generated by the world is destroyed, it drops a log, not a wall piece.
	@Override
	public Item getItemDropped(BlockState state, Random rand, int fortune)
	{
		if (state.get(PROPERTY_GENERATED))
		{
			return Item.getItemFromBlock(BlocksAether.skyroot_log);
		}
		return super.getItemDropped(state, rand, fortune);
	}

	@Override
	public BlockState getStateFromMeta(int meta)
	{
		return this.getDefaultState();
	}

	@Override
	public int getMetaFromState(BlockState state)
	{
		if (state.get(PROPERTY_GENERATED))
		{
			return 1;
		}

		return 0;
	}

	@Override
	@OnlyIn(Dist.CLIENT)
	public boolean shouldSideBeRendered(BlockState state, IBlockReader world, BlockPos pos, Direction side)
	{
		BlockState neighborState = world.getBlockState(pos.offset(side.getOpposite()));

		return state != neighborState && super.shouldSideBeRendered(state, world, pos, side);
	}

	@Override
	protected void fillStateContainer(StateContainer.Builder<Block, BlockState> builder)
	{
		builder.add(BlockCustomWall.UP, BlockCustomWall.NORTH, BlockCustomWall.EAST, BlockCustomWall.WEST, BlockCustomWall.SOUTH,
				BlockWall.VARIANT, BlockSkyrootWall.PROPERTY_GENERATED);
	}
}
